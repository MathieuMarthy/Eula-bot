import asyncio
import ast
import time
import os
import random
import requests

import discord
from discord.ext import commands
from discord.ext.commands import has_permissions

from keep_alive import keep_alive

# --- setup
token = ""
path = r"/home/debian/botdiscord/Eula-bot"
prefix = "!"
default_intents = discord.Intents.default()
decalage_horaire = 1
default_intents.members = True
client = commands.Bot(command_prefix = [prefix, "<@914226393565499412> ", "<@914226393565499412>", "<@!914226393565499412> ", "<@!914226393565499412>"],  help_command = None, intents = default_intents)

#--- dico
dico = ast.literal_eval(open(os.path.join(path, "server.txt"), "r").read().replace("f'", '"'))
# forme:  {id: {"name": str, "logs": int, "voc": int, "autorole": int, "welcome_msg": str}}

print("connection...")


@client.event
async def on_ready():
    print("connect√© ! ‚äÇ(‚óâ‚Äø‚óâ)„Å§")
    await client.change_presence(activity=discord.Activity(type=discord.ActivityType.playing, name=f"{prefix}help"))
    for serveur in client.guilds:
        if serveur.id not in dico:
           dico[serveur.id] =  {"name": serveur.name, "logs": None, "voc": None, "autorole": None}
    dico_update()

# --- fonctions
# - all
def dico_update():
    open(os.path.join(path, "server.txt"), "w").write(str(dico))


def channel_send(id):
    return client.get_channel(id)


def get_time():
    time_ = str(time.strftime("%d/%m/%Y - %H:%M:%S", time.localtime()))
    hour = time.strftime("%H", time.localtime())
    new_h = "0" if str(int(hour) + decalage_horaire) == "24" else str(int(hour) + decalage_horaire)
    
    return time_.replace(hour, new_h)


def replaces(string, *args):
    for i in range(0, len(args), 2):
        string = string.replace(args[i], args[i + 1])
    return string


def get_member(member):
    if not member.isdigit():
        if "!" in member:
            member = replaces(member, "<@!", "", ">", "")
        else:
            member = replaces(member, "<@", "", ">", "")
    return client.get_user(int(member))
    
    
# - mini jeux
async def start_game_multi(ctx, limit, name_game):
    """
    Args:
    -----
        ctx : ctx
        limit : le nombre de manches dans le jeu
        name_game : nom du jeu

    return:
    -------
        list : liste des participants
        dict : dictionnaire des points 

    """
    if str(limit).isdigit():
        limit = int(limit)
    else:
        limit = 5
    msg = await ctx.send(f"**Partie de {name_game} lanc√©e !**\npour participer r√©agissez avec üñêÔ∏è")
    await msg.add_reaction("üñêÔ∏è")
    await asyncio.sleep(15)
    list_user = []
    async for e in ctx.channel.history(limit=100):
        if e.id == msg.id:
            for reaction in e.reactions:
                if reaction.emoji == "üñêÔ∏è":
                    async for user in reaction.users():
                        if user.id != client.user.id:
                            list_user.append(user)
            break
    if len(list_user) == 0:
        await ctx.reply("Aucun joueur n'a rejoint la partie", mention_author=False)
        return [], []
    str_name = ""
    dico_points = {}
    for i in list_user:
        dico_points[i.id] = 0
        str_name += ", " + i.name
    str_name = str_name.replace(", ", "", 1)
    await ctx.send(f"Liste des participants: {str_name}\nC'est parti pour {limit} manches !")
    await asyncio.sleep(3)
    return list_user, dico_points


async def start_game_duo(ctx, member, name_game):
    member = get_member(member)
    
    if member is None:
        await ctx.send("Vous n'avez pas mentionn√© un joueur")
        return False, None
    
    await ctx.send(f"{member.mention} acceptez-vous la partie de {name_game} contre **{ctx.author.name}** ?")
    try:
        msg = await client.wait_for("message", check=lambda message: message.author.id in [member.id, ctx.author.id] and message.content.lower() in ["y", "o", "n", "yes", "oui", "no", "non"], timeout=180)
    except asyncio.TimeoutError:
        await ctx.reply(f"**{member.name}** n'a pas r√©pondu", mention_author=False)
        return False, None

    if msg.content.lower() in ["n", "non", "no"]:
        await ctx.send("Partie refus√©e")
        return False, None
    else:
        return True, member


async def end_game(ctx, list_user, dico_points):
    """
    Args:
    -----
        ctx : ctx
        list_user : liste de tous les participants
        dico_points : dictionnaire des points 
    """
    n = (list_user[0].id, dico_points[list_user[0].id])
    for id, point in dico_points.items():
        if n[1] < point:
            n = (id, point)
    list_winner = [id for id, point in dico_points.items() if n[1] == point]
    if len(list_winner) == 1:
        username = client.get_user(list_winner[0])
        await ctx.send(f"Û†ÄÆ \n**Partie finie !**\nLe vainqueur est {username.mention} avec {dico_points[username.id]} points !")
    else:
        str_winner = ""
        for i, e in enumerate(list_winner):
            username = client.get_user(list_winner[i])
            str_winner += " " + username.mention
        await ctx.send(f"Û†ÄÆ \n**Partie finie !**\nLes vainqueurs sont {str_winner} avec {dico_points[username.id]} points !")
    

# --- commandes/commands
# - everyone
@client.command()
async def hentai(ctx, category = "help", nbr = "1"):
    if nbr.isdigit():
        nbr = int(nbr)
    else:
        nbr = 1

    if nbr > 20:
        await ctx.send("Le nombre maximum d'image est de 20")
        nbr = 20

    if not ctx.channel.is_nsfw() and not ctx.author.guild_permissions.administrator:
        await ctx.send("Il faut que le salon soit nsfw pour que la commande fonctionne")
        return

    if category in ["ass", "bdsm", "cum", "creampie", "manga", "femdom", "hentai", "incest", "masturbation", "public", "ero", "orgy", "elves", "yuri", "pantsu", "glasses", "cuckold", "blowjob", "boobjob", "foot", "thighs", "vagina", "ahegao", "uniform", "gangbang", "tentacles", "gif", "neko", "nsfwMobileWallpaper", "zettaiRyouiki"]:
        for _ in range(nbr):
            response = requests.get(f"https://hmtai.herokuapp.com/nsfw/{category}")
            link = ast.literal_eval(response.text)
            await ctx.send(link["url"])
    else:
        await ctx.send("**Liste des categories:**\nass, bdsm, cum, creampie, manga, femdom, hentai, incest, masturbation, public, ero, orgy, elves, yuri, pantsu, glasses, cuckold, blowjob, boobjob, foot, thighs, vagina, ahegao, uniform, gangbang, tentacles, gif, neko, nsfwMobileWallpaper, zettaiRyouiki")


@client.command(aliases=["profile_picture", "pdp"])
async def pp(ctx, member):
    member = get_member(member)

    if member is None:
        await ctx.send("Vous n'avez pas mentionn√© un joueur !")

    filename = "avatar.gif" if member.is_avatar_animated() else "avatar.png"
    await member.avatar_url.save(filename)
    file = discord.File(fp=filename)
    await ctx.send(file=file)
    os.remove(filename)



@client.command(aliases=["random"])
async def aleatoire(ctx, nbr):
    if int(nbr) < 0 :
        await ctx.send("Le nombre doit √™tre plus grand que 0")
    else:
        await ctx.send(random.randint(0, int(nbr)))

        
@client.command(aliases=["pile", "face", "piece", "pileouface"])
async def pile_ou_face(ctx):
    
    embed=discord.Embed(color=0xf0a3ff)
    
    if random.choice([True, False]):
        embed.add_field(name=f"Û†ÄÆPile", value="----", inline=True)
        embed.set_image(url="https://media.discordapp.net/attachments/836943322580516904/956276974383423538/pile_eula.png")
    else:
        embed.add_field(name=f"Û†ÄÆFace", value="----", inline=True)
        embed.set_image(url="https://media.discordapp.net/attachments/836943322580516904/956276974660251748/face_eula.png")
        
    await ctx.reply(embed=embed, mention_author=False)
        
        
@aleatoire.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque le nombre ! syntaxe: {prefix}random <nombre>")


@client.command(aliases=["8ball", "8"])
async def eightball(ctx, *, msg):
    a = ["Une chance sur deux", "D'apr√®s moi oui", "C'est certain", "Oui absolument", "Sans aucun doute", "Tr√®s probable", "Oui", "C'est bien parti", "C'est non", "Peu probable", "Faut pas r√™ver", "N'y compte pas", "Impossible"]
    if msg.endswith("ratio ?"):
        await ctx.reply("ratio !", mention_author=False)
    else:
        await ctx.reply(random.choice(a), mention_author=False)


@client.command()
async def ping(ctx):
    embed=discord.Embed(color=0xf0a3ff)
    embed.set_author(name="ping", icon_url="https://media.discordapp.net/attachments/836943322580516904/917794030694318172/padoru_eula___genshin_impact_by_dekunyart_devgso1-fullview.png?width=614&height=614")
    embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/915294111362334810/power-button.png")
    embed.add_field(name="Û†ÄÆ ", value="**Je suis connect√© !**", inline=True)
    await ctx.send(embed=embed)


@client.command()
async def help(ctx):
    embed=discord.Embed(color=0xf0a3ff)
    embed.set_author(name="help - Eula", icon_url="https://media.discordapp.net/attachments/836943322580516904/917794030694318172/padoru_eula___genshin_impact_by_dekunyart_devgso1-fullview.png?width=614&height=614")
    embed.add_field(name="contact", value="Si vous avez des retours √† faire venez DM **kojhyy#0012**\nÛ†ÄÆ ", inline=False)
    if ctx.author.guild_permissions.administrator:
        embed.add_field(name=f"{prefix}toggle_autorole <role> - _admin_", value="active/desactive le fait de donner un role √† tous les nouveaux arrivant", inline=False)
        embed.add_field(name=f"{prefix}toggle_rolevocal - _admin_", value="active/desactive le fait de donner un role √† chaque fois qu'un membre rejoint un salon vocal ", inline=False)  
        embed.add_field(name=f"\n{prefix}toggle_logs - _admin_", value="active/d√©sactive les logs", inline=False)
        embed.add_field(name=f"\n{prefix}toggle_welcome_message - _admin_", value="active/d√©sactive le message de bienvenue", inline=False)
        embed.add_field(name=f"{prefix}clear <nbr/texte> - _admin_", value="supprime le nombres de messages,\nsupprime les messages jusqu'au lien donn√©", inline=False)
        embed.add_field(name=f"{prefix}nuck <salon> - _admin_", value="enleve tous les messages d'un salon", inline=False)
              
        embed.add_field(name=f"{prefix}say <salon> <message> - _admin_", value="envoie un message dans un salon", inline=False)
        embed.add_field(name=f"{prefix}reaction <salon> <id du msg> <reactions>", value="le bot r√©agit au message avec les reactions donn√©s, les reaction doivent √™tre coller", inline=False)
        embed.add_field(name=f"{prefix}dm <id du membre/mention> <message>", value="envoie le message avec le bot",inline=False)
    embed.add_field(name="commandes normales", value="----------------------------", inline=False)
    embed.add_field(name=f"{prefix}8ball <message>", value="Boule magique", inline=False)
    embed.add_field(name=f"{prefix}10fastfinger", value="jeu multijoueur dans lequel les participants doivent √©crire une phrase le plus vite possible", inline=False)
    embed.add_field(name=f"{prefix}calcul_mental", value="jeu multijoueur dans lequel les participants doivent r√©soudre des calculs", inline=False)
    embed.add_field(name=f"{prefix}random <nombre>", value="donne un nombre aleatoire entre 0 et le nombre donn√©", inline=False)
    embed.add_field(name=f"{prefix}piece", value="pile ou face", inline=False)
    embed.add_field(name=f"{prefix}ping", value="ping le bot", inline=False)
    embed.add_field(name=f"{prefix}puissance4 <id du membre/mention>", value="lance une partie de puissance 4", inline=False)
    embed.add_field(name=f"{prefix}monopoly", value="lance une partie de monopoly", inline=False)
    embed.add_field(name=f"{prefix}hentai <categorie> <nbr d'images>", value="si le salon est NSFW envoie des images hentai", inline=False)
    embed.add_field(name=f"{prefix}pp <id du membre/mention>", value="donne la pp du membre", inline=False)
    await ctx.send(embed=embed)
    # embed.add_field(name=f"{prefix}", value="", inline=False)


# - jeux
@client.command(aliases=["10fastfinger", "10ff"])
async def jeu_reaction(ctx, limit = 5):
    list_user, dico_points = await start_game_multi(ctx, limit, "10fastfinger")
    if list_user == []:
        return

    turn = 0
    def get_sentences():
        a = requests.get("https://enneagon.org/phrases").text

        a = a[a.find('<div class="main">') + 23 : a.find("</div>") - 6]
        a = replaces(a, "&nbsp", "", ";" , "", " <br>", "")
        for e in a:
            e = e.replace("√â", "E")

        return [i.strip() for e in a.split(".") for i in e.split(",") if 70 > len(i) > 20]

    list_question = get_sentences()
    while turn != limit:
        mot = list_question[random.randint(0, len(list_question) - 1)]
        embed=discord.Embed(color=0xf0a3ff)
        embed.add_field(name="Phrase", value=mot, inline=False)
        await ctx.send(embed=embed)
        list_question.remove(mot)
        if len(list_question) == 0:
            list_question = get_sentences()
        try:
            msg = await client.wait_for("message", check=lambda message: message.author in list_user and message.content in [mot, "exit", "!exit", "leave", "!leave", "Exit", "!Exit", "leave", "Leave"], timeout=60)
        except asyncio.TimeoutError:
            await ctx.send("partie finie √† cause d'inactivit√©")
            break
        if msg.content.lower() in ["exit", "!exit", "leave", "!leave"]:
            await ctx.send("partie annul√©e !")
            return
        dico_points[msg.author.id] += 1
        await ctx.send(f"**{msg.author}** gagne le point ! {dico_points[msg.author.id]} points")
        turn += 1
        await asyncio.sleep(3)

    await end_game(ctx, list_user, dico_points)


@client.command()
async def calcul_mental(ctx, limit = 5):
    list_user, dico_points = await start_game_multi(ctx, limit, "calcul mental")
    if list_user == []:
        return

    turn = 0
    operateur = [1, 2]
    while turn != limit:
        ope = operateur[random.randint(0, len(operateur) - 1)]
        if ope == 1:
            calcul = f"{random.randint(0, 11)} * {random.randint(0, 11)}"
        elif ope == 2:
            nbr = random.randint(1, 2)
            list_ope = ["+", "-"]
            calcul = ""
            for i in range(nbr):
                calcul += " " + list_ope[random.randint(0, 1)] + " "
                calcul += f"{random.randint(-500, 500)} {list_ope[random.randint(0, 1)]} {random.randint(-500, 500)}"
            calcul = calcul[3:]

        embed=discord.Embed(color=0xf0a3ff)
        embed.add_field(name="Calcul", value=calcul, inline=False)
        await ctx.send(embed=embed)
        try:
            msg = await client.wait_for("message", check=lambda message: message.author in list_user and message.content.lower() in [str(eval(calcul)), "exit", "!exit", "leave", "!leave"], timeout=180)
        except asyncio.TimeoutError:
            await ctx.send("partie finie √† cause d'inactivit√©")
            break
        if msg.content.lower() in ["exit", "!exit", "leave", "!leave"]:
            await ctx.send("partie annul√©e !")
            return
        dico_points[msg.author.id] += 1
        await ctx.send(f"**{msg.author}** gagne le point ! {dico_points[msg.author.id]} points")
        turn += 1
        await asyncio.sleep(3)

    await end_game(ctx, list_user, dico_points)

@client.command()
async def monopoly(ctx, private = None):
    msg = await ctx.send("**Partie de Monopoly lanc√©e !**\npour participer r√©agissez avec üñêÔ∏è")
    await msg.add_reaction("üñêÔ∏è")
    await asyncio.sleep(12)
    list_user = []
    async for e in ctx.channel.history(limit=100):
        if e.id == msg.id:
            for reaction in e.reactions:
                if reaction.emoji == "üñêÔ∏è":
                    async for user in reaction.users():
                        if user.id != client.user.id:
                            list_user.append(user)
            break

    if not list_user:
        await ctx.reply("Aucun joueur n'a rejoint la partie", mention_author=False)
        return

    elif len(list_user) == 1:
        await ctx.reply("Vous ne pouvez pas jouer seul")


    ### d√©claration des classes

    class player:
        def __init__(self, discord, emote) -> None:
            # en lui meme
            self.discord = discord
            self.money = 2000
            self.lost = False

            # ses possessions
            self.properties = []
            self.train_station = 0
            self.card_jail = False

            # utile au programme
            self.emote = emote
            self.position = 0
            self.last_position = (12, 11)
            self.turn_jail = 0
            self.turn_protection = 0

        def jail(self):
            # le joueur vas en prison
            self.turn_jail = 2
            self.position = 10

        def move(self, number):
            # se d√©place
            tmp = self.position
            self.position = self.position + number - 40 if self.position + number >= 40 else self.position + number
            if self.position < tmp:
                self.money += 200

        def buy(self, property):
            # ach√®te une propri√©t√©
            self.money -= property.rent
            self.properties.append(property)

            if property.emote == "üöâ":
                user.train_station += 1

            property.is_bought(self)
            board.property_is_bought(property)

        def lost_property(self, property):
            # perd une propri√©t√©
            self.properties.remove(property)
            
            board.property_is_sell(property)
            property.owner = None

        def mortgage(self, property):
            # hypoth√®que une propri√©t√©
            self.lost_property(property)
            self.money += int(property.rent / 2)

            board.property_is_sell(property)

        def game_over(self):
            # perd la partie
            self.lost = True
            list_player.remove(self)

            for property in self.properties.copy():
                self.lost_property(property)

            remove_emote(user.last_position, self)

    class property:
        def __init__(self, name, rent, emote) -> None:
            self.name = name
            self.rent = rent
            self.emote = emote
            
            self.owner = None
            self.x_rent = 1.0

            self.benefit = 0

        def is_bought(self, player):
            self.owner = player
            self.x_rent = 1.0

        def get_rent(self) -> int:
            station_bonus = 100 * self.owner.train_station - 1 if self.emote == "üöâ" else 0
            return int(self.rent * self.x_rent + station_bonus)

        def increase_x_rent(self):
            self.x_rent += 0.05

    class _board:
        def __init__(self, list_square) -> None:
            self.properties_left = [case for case in list_square if isinstance(case, property)]
            self.all_properties = self.properties_left.copy()
            self.player_same_square = {}

        def property_is_bought(self, property):
            self.properties_left.remove(property)

        def property_is_sell(self, property):
            self.properties_left.append(property)


    ### d√©claration des fonctions

    def luck():
        nbr = random.randint(min , max)
        if nbr == -1:
            user.money += 200
            return "tony a arr√™t√© d'√™tre gay, tu perds moins d'argent en capote, gagne 200 ‚Çø"
        elif nbr == 0:
            user.money += 200
            return "tony a arr√™t√© d'√™tre gay, tu perds moins d'argent en capote, gagne 200 ‚Çø"
        elif nbr == 1:
            user.position = 0
            user.money += 100
            return "Retournez √† la case d√©part et touchez 100 ‚Çø"
        elif nbr == 2:
            msg = "Un furry vous pourchasse vous allez au parc gratuit"
            if user.position >= 21:
                user.money += 200
                msg += "\nvous passez par la case d√©part et recevez 100 ‚Çø"
            user.position = 20
            return msg
        elif nbr == 3:
            user.money -= 125
            return "Vous avez gagn√© un iphone 13 !\nmais c'√©tait une arnaque -300 ‚Çø"
        elif nbr == 4:
            user.position = random.randint(0, 40)
            return "Blitzcrank vous √† attrap√©, il vous t√©l√©porte al√©atoirement sur le plateau"
        elif nbr == 5:
            for player_ in list_player:
                user.money += 75
                player_.money -= 75
            return "C'est ton anniv Bro!!! les autres joueurs doivent te donner 75 ‚Çø or Kons√©kens"
        elif nbr == 6:
            user.money += 325
            return "SIUUUUUU ! Oh mon dieu Ronaldo viens vous voir et vous donne 325 ‚Çø"
        elif nbr == 7:
            user.money = int(user.money * 0.95)
            return "Les gros rats de la banque vous vole 5% de votre richesse"
        elif nbr == 8:
            user.money += 175
            return "Tu es tr√®s beau donc tu gagne un concours de beaut√© >u<. + 175 ‚Çø"
        elif nbr == 9:
            user.money -= 100
            return "Tu as perdu une battle de rap contre JUL... le monde te desteste maintenant et ta famille te renies... -100 ‚Çø"
        elif nbr == 10:
            user.money -= 200
            return "OMG banner de Klee ! perd 200 ‚Çø. sad ta pity sur Qiqi"
        elif nbr == 11:
            user.money -= 160
            return "Tu as perdu ton porte feuille... 160 Balles en moins. T'es trop con aussi bro"
        elif nbr == 12:
            user.money += 225
            return "Tu vends tes pieds sur Onlyfans + 225 ‚Çø"
        elif nbr == 13:
            user.money -= 175
            return "Tu as trop rager sur Clash royal tu as cass√© ton t√©l√©phone, il faut te le repayer, - 175 ‚Çø"
        elif nbr == 14:
            user.money -= 250
            return "Tu as rencontrer une e-girl HYPER BONNE!!! ton coeur est combl√© mais tu as plus d'argent de poche... -250 ‚Çø"
        elif nbr == 15:
            user.money += 400
            return "tu as gagn√© au loto, o_0 + 400 ‚Çø"
        elif nbr == 16:
            user.money += 300
            user.jail()
            return "Tu √©cris le meilleur hentai de loli, gagne 300 ‚Çø mais perds ta sant√©e mentale et va en prison"
        elif nbr == 17:
            user.money += 125
            return "Tu touches l'h√©ritage de tonton jean-ma, gagne 125 ‚Çø"
        elif nbr == 18:
            user.money += 100
            return "Tu as gagner au loto mais ton p√®re √† enfin fini d'acheter des clopes donc au lieu de gagner 1000 ‚Çø tu gagne 100 ‚Çø"
        elif nbr == 19:
            property_ = list_square[21]
            msg = "Tu deviens premier ministre des randoms, acqui√®re l'avenue matignon"
            if property_.owner is None:
                user.buy(property_)
                user.money += property_.rent
            elif property_.owner == user:
                msg += "\nmais tu poss√®de deja cette avenue !"
            else:
                msg += f", si d√©j√† occup√©e,\nle propri√©taire te doit le prix d'acquisition donc **{property_.owner.discord.name}** paye {property_.rent} ‚Çø"
                if property_.owner.money - property_.rent < 0:
                    msg += f"{property_.owner} n'a pas assez d'argent pour payer ! il est donc √©liminer"
                    property_.owner.game_over()
                else:
                    property_.owner.money -= property_.rent
                    user.money += property_.rent
            return msg
        elif nbr == 20:
            user.money -= 250
            return "tu es mort. tu doit payer 250 ‚Çø pour pouvoir t'enterrer"
        elif nbr == 21:
            user.money -= 100
            return "la litt√©rature fran√ßaise t'a aider a avancer ! +10 point en intelligence mais -100‚Ç¨ pour tous les livres achet√©"
        elif nbr == 22:
            random_user = random.choice(list_player)
            text = f"**{random_user.discord.name}** intente un proc√®s contre vous ! le gagnant gagne 200 ‚Çø\nle resultat se joue sur un pile(vous gagnez) ou face(vous perdez)\n"
            if random.randint(0, 1):
                tmp = 200
                text += f"\n*le juge lance la piece ...*\nFACE\n **{random_user.discord.name}** gagn√©"
            else:
                tmp = -200
                text += f"\n*le juge lance la piece ...*\nPILE\n **{user.discord.name}** gagn√©"
            user.money -= tmp
            random_user.money -= -tmp
            return text
        elif nbr == 23:
            user.money -= 238
            return "la congolexicomatisation des lois du march√© congolais √† augmenter ta thune +238 ‚Çø"
        elif nbr == 24:
            user.money += 12
            return "Eric Zemmour est pass√© au pouvoir et t'as d√©gag√© de la france mais avec de l'argent pour que tu puissent a minima vivre. -1 pays mais +12‚Ç¨"
        elif nbr == 25:
            user.turn_protection += 1
            return "Tu migre √† malte, tu ne paye pas au prochain tour"
        elif nbr == 26:
            user.turn_protection += 2
            return "Tu as un compte en banque en Suisse!!! tu est immunis√© a toute facture (maison/taxe) pendant 2 tours."
        elif nbr == 27:
            user.card_jail = True
            return "Un mafieux peut corrompre la garde de la prison pour toi\ncette carte peux √™tre utilis√© plus tard"
        elif nbr == 28:
            return "Tu as voler de la nourriture a un Africain. +100 de riz et c'est tout TA CRU KOI TOUA"
        elif nbr == 29:
            for player_ in list_player:
                player_.position = 0
            return "tout le monde retourne √† la case d√©part !"
        elif nbr == 30:
            for player_ in list_player:
                player_.money -= 100
            user.money += 100 * len(list_player) - 1
            return "tu cr√©e un commerce de ton eau de bain de femboy, chaque joueurs en ach√®te pour 100 ‚Çø"
        elif nbr == 31:
            for player_ in list_player:
                player_.money -= 50
            user.money += 50 * len(list_player) - 1
            user.money += 200
            return "Tu as empech√© Hitler de se suicider, +200 ‚Çø et +50 ‚Çø des joueurs pour cet exploit monumentale"
        elif nbr == 32:
            user.money -= 650
            return "Tu vote Sandrine Rousseau ?\nRATIO -650 ‚Çø"

    def print_board():
        # transforme la matrice en texte qui sera affich√© sur discord
        msg = ""
        for list_of_emote in matrice_board:
            for emote in list_of_emote:
                msg += emote
            msg += "\n"
        return msg

    
    def place_emote(tupl, user):
        # place l'emoji du joueur sur la matrice
        pos = matrice_board[tupl[0]][tupl[1]]
        if pos in list_emote:

            for user_bis in list_player:
                if user_bis.emote == pos:
                    board.player_same_square[tupl] = [user_bis, user]
                    matrice_board[tupl[0]][tupl[1]] = "2Ô∏è‚É£"

        elif tupl in board.player_same_square:
            board.player_same_square[tupl] = board.player_same_square[tupl] + [user]
            dico = {
            2: "2Ô∏è‚É£",
            3: "3Ô∏è‚É£",
            4: "4Ô∏è‚É£",
            5: "5Ô∏è‚É£",
            6: "6Ô∏è‚É£",
            7: "7Ô∏è‚É£",
            8: "8Ô∏è‚É£",
            9: "9Ô∏è‚É£"
            }

            matrice_board[tupl[0]][tupl[1]] = dico[len(board.player_same_square[tupl])]
        else:
            matrice_board[tupl[0]][tupl[1]] = user.emote


    def remove_emote(tupl, user):
        # enleve l'emoji du joueur de la matrice

        if tupl in board.player_same_square:

            if len(board.player_same_square[tupl]) == 2:
                board.player_same_square[tupl].remove(user)
                matrice_board[tupl[0]][tupl[1]] = board.player_same_square[tupl][0].emote
                board.player_same_square.pop(tupl)

            else:
                board.player_same_square[tupl].remove(user)
                dico = {
                    2: "2Ô∏è‚É£",
                    3: "3Ô∏è‚É£",
                    4: "4Ô∏è‚É£",
                    5: "5Ô∏è‚É£",
                    6: "6Ô∏è‚É£",
                    7: "7Ô∏è‚É£",
                    8: "8Ô∏è‚É£",
                    9: "9Ô∏è‚É£"
                }

                matrice_board[tupl[0]][tupl[1]] = dico[len(board.player_same_square[tupl])]
        else:
            matrice_board[tupl[0]][tupl[1]] = "‚¨õ"


    def place_player(user):
        # actualise la position de tout les joueurs
        pos = user.position
        remove_emote(user.last_position, user)

        if 0 <= pos <= 10:
            pos_ = (12, 11 - pos)
        elif 11 <= pos <= 20:
            pos -= 10
            pos_ = (11 - pos, 0)
        elif 21 <= pos <= 30:
            pos -= 20
            pos_ = (0, 1 + pos)
        else:
            pos -= 31
            pos_ = (2 + pos, 12)
    

        place_emote(pos_, user)
        user.last_position = pos_


    def random_emote():
        # donne une emote al√©atoire
        tmp = random.choice(prepa_emote)
        prepa_emote.remove(tmp)
        list_emote.append(tmp)
        return tmp


    async def put_emotes(list_of_emotes):
        # met les emotes sur le msg
        try:
            for emote in list_of_emotes:
                await msg.add_reaction(emote)
        except:
            await msg.clear_reactions()
            for emote in list_emote_game + list_of_emotes:
                await msg.add_reaction(emote)


    def hearder_msg():
        return f"{user.discord.mention}, ‚Çø: {user.money}, üè†: {len(user.properties)}"


    async def ask(dice_, action):
        await msg.edit(embed=discord_embed(hearder_msg(), dice_, action))
        await put_emotes(["‚úÖ", "‚ùå"])
        
        try:
            emoji, user_ = await client.wait_for("reaction_add", check=lambda reaction, user_: user_.id == user.discord.id and str(reaction.emoji) in ["‚úÖ", "‚ùå"] and reaction.message.id == msg.id, timeout=300)
        except asyncio.TimeoutError:
            pass
    
        await msg.remove_reaction(emoji, user_)
        
        return emoji, user_


    def discord_embed(username, dice, action):
        # cr√©er un embed discord
        embed=discord.Embed()
        embed.add_field(name="Plateau, cases restantes: " + str(len(board.properties_left)), value=print_board(), inline=True)
        embed.add_field(name="Tour de", value=username, inline=False)
        embed.add_field(name="d√©", value=dice, inline=False)
        embed.add_field(name="action", value=action, inline=False)
        return embed

    
    async def wait_reactions():
        # fonction main, attends une reaction
        
        # for player_ in list_player:
            # place_player(player_)

        await msg.edit(embed=discord_embed(hearder_msg(), "en attente...", "..."))

        # si le joueur est en prison et a une carte pour sortir de prison
        if user.turn_jail != 0 and user.card_jail:
            emoji, _ = await ask("...", f"**{user.discord.name}**, voulez-vous utilisez votre carte sortie de prison ?")

            if str(emoji.emoji) == "‚úÖ":
                user.turn_jail = 0
                user.card_jail = False
                text = "Vous avez utilisez votre carte !"
            else:
                text = "Vous n'avez pas utilisez votre carte !"
            await msg.edit(embed=discord_embed(hearder_msg(), f"...", text))

            await asyncio.sleep(3)


        # si le joueur n'est pas en prison
        if user.turn_jail == 0:
            # attends que le joueur utilise une reaction
            try:
                emoji, _ = await client.wait_for("reaction_add", check=lambda reaction, user_: user_.id == user.discord.id and str(reaction.emoji) in list_emote_game + ["üõë", "üîÑ"], timeout=300)
            except asyncio.TimeoutError:
                # si le joueur est afk on passe son tour
                await msg.edit(embed=discord_embed(hearder_msg(), "...", f"{user.discord.name} n'a pas jou√© on saute son tour"))
                await asyncio.sleep(3)
                return False

            await msg.remove_reaction(emoji, user.discord)

            if str(emoji.emoji) == "üé≤":
                await play()


            elif str(emoji.emoji) == "‚ÑπÔ∏è":
                
                msgs = []
                tmp = 0
                embed=discord.Embed(title="emote: nom, loyer, proprietaire, benefice")
                for emote in ["üöâ", "üü´", "üü¶", "üü™", "üüß", "üü•", "üü®", "üü©", "‚¨ú"]:
                    text = ""
                    for property_ in [property_ for property_ in board.all_properties if property_.emote == emote]:
                        text += f"{property_.emote}: {property_.name}, {property_.rent if property_.owner is None else property_.get_rent()}, {'aucun' if property_.owner is None else property_.owner.discord.name}, {property_.benefit}\n"
                    embed.add_field(name="case:", value=text, inline=False)
                    tmp += 1
                    if tmp == 5 or tmp == 9:
                        msgs.append(await ctx.send(embed=embed))
                        embed=discord.Embed()
                    

                await put_emotes("‚ùå")

                try:
                    num, _ = await client.wait_for("reaction_add", check=lambda reaction, user_: user_.id == user.discord.id and str(reaction.emoji) == "‚ùå" and msg.id == reaction.message.id, timeout=300)
                except asyncio.TimeoutError:
                    pass
                
                await msg.clear_reaction("‚ùå")

                for msg_ in msgs:
                    await msg_.delete()
                await wait_reactions()
            

            elif str(emoji.emoji) == "üõë":
                await msg.edit(embed=discord_embed("...", "...", "partie annul√©e"))
                return True
            

            elif str(emoji.emoji) == "üè≥Ô∏è":
                emoji, _ = await ask("...", f"**{user.discord.name}** voulez-vous vraiment abandonner ?")

                if str(emoji.emoji) == "‚úÖ":
                    for react in ["‚ùå", "‚úÖ"]:
                        await msg.clear_reaction(react)
                    await msg.edit(embed=discord_embed(hearder_msg(), "...", "vous avez abandonn√© !"))
                    user.game_over()
                else:
                    for react in ["‚ùå", "‚úÖ"]:
                        await msg.clear_reaction(react)
                    await wait_reactions()
                

            

            elif str(emoji.emoji) == "‚¨ÜÔ∏è":
                if len(user.properties) == 0:
                    await msg.edit(embed=discord_embed(hearder_msg(), "...", "Vous possedez aucune propri√©t√© !"))
                price_upgrade = 75 * len(user.properties)
                num, _ = await ask("...", f"**{user.discord.name}** voulez-vous payer {price_upgrade} ‚Çø\n pour augmenter le loyer de toutes vos propri√©t√©s de 5 % ?")

                if str(num.emoji) == "‚úÖ":
                    user.money -= price_upgrade

                    for property_ in user.properties:
                        property_.increase_x_rent()
                    
                    text = "Le loyer de toutes vos propri√©t√©s a √©t√© augment√© !"
                else:
                    text = "op√©ration annul√©e"
                await msg.edit(embed=discord_embed(hearder_msg(), "...", text))
                
                for react in ["‚ùå", "‚úÖ"]:
                        await msg.clear_reaction(react)
                    
                await asyncio.sleep(3)
                await wait_reactions()


            elif str(emoji.emoji) == "üè¶":
                text = "".join(f"{property_.emote}: {property_.name}, {int(property_.rent / 2)}\n" for property_ in user.properties)
                if text == "":
                    await msg.edit(embed=discord_embed(hearder_msg(), "...", "Vous possedez aucune propri√©t√© !"))
                    await asyncio.sleep(4)
                    await wait_reactions()
                    return False


                embed=discord.Embed()
                embed.add_field(name=f"Argent", value=f"{user.money} ‚Çø" , inline=False)
                embed.add_field(name="Instructions", value=f"**{user.discord.name}** √©crivez le nom des propri√©t√©s a vendre et \"leave\" pour quitter", inline=False)
                embed.add_field(name="prix de vente", value=text, inline=False)
                msg_info = await ctx.send(embed=embed)

                name_properties = [property_.name.lower() for property_ in user.properties]

                content = ""

                while True:
                    try:
                        message = await client.wait_for("message", check=lambda message: message.author.id == user.discord.id and message.channel.id == msg.channel.id, timeout=300)
                    except asyncio.TimeoutError:
                        await msg_info.delete()
                        await wait_reactions()
                        return False

                    content = message.content.lower()
                    
                    text = "".join(f"{property_.emote}: {property_.name}, {int(property_.rent / 2)}\n" for property_ in user.properties)
                    if content in ["leave", "quit", "quitter", "partir"] or text == "":
                        await message.delete()
                        await msg_info.delete()
                        await wait_reactions()
                        return False
                        
                    else:
                        embed=discord.Embed()
                        embed.add_field(name=f"Argent", value=f"{user.money} ‚Çø" , inline=False)
                        embed.add_field(name="Instructions", value=f"**{user.discord.name}** √©crivez le nom des propri√©t√©s a vendre et leave pour arreter", inline=False)
                        embed.add_field(name="prix de vente", value=text , inline=False)

                        if content in name_properties:
                            index = name_properties.index(content)
                            user.mortgage(user.properties[index])
                            embed.add_field(name="info", value=f"\"{content}\" a bien √©t√© vendu", inline=False)

                        else:
                            embed.add_field(name="info", value=f"\"{content}\" n'est pas une propri√©t√© ou elle ne vous appartient pas\"" , inline=False)
                        await msg_info.edit(embed=embed)
                        await asyncio.sleep(3)
                        await message.delete()

            elif str(emoji.emoji) == "üîÑ":
                await put_emotes(list_emote_game)
                await wait_reactions()

            return False       


    async def play():
        # le joueur lance les d√©s
        await msg.edit(embed=discord_embed(hearder_msg(), "lancement du d√©...", "..."))
        dice1 = random.randint(1, 6)
        dice2 = random.randint(1, 6)
        replay = False
        
        dice = dice1 + dice2
        if dice1 == dice2:
            dice = str(dice) + ", double "
            replay = True

        # d√©place le joueur
        user.move(dice1 + dice2)
        place_player(user)
        square = list_square[user.position]

        # propri√©t√©
        if isinstance(square, property):

            # si le joueur est chez lui
            if square.owner == user:
                square.increase_x_rent()
                str_ = str(square.x_rent)[2:4]
                str_nbr =  str_ + "0" if len(str_) == 1 else str_
                text = f"**{user.discord.name}** vous √™tes chez vous !\nle loyer augmente de {str_nbr} %, ( {square.get_rent()} ‚Çø )"

            elif square.rent < user.money and square.owner is None:
                emoji , _ = await ask(f"le d√© est tomb√© sur ... {dice} !", f"**{user.discord.name}** voulez-vous acheter {square.name} pour {square.rent} ‚Çø ?")

                if str(emoji.emoji) == "‚úÖ":
                    user.buy(square)
                    text = f"**{user.discord.name}** vous avez achet√© {square.name} !"
                else:
                    text = f"**{user.discord.name}** vous n'avez pas achet√© {square.name} !"
                    
            else:
                if user.turn_protection != 0:
                    text = f"vous devez payer {square.rent if square.owner is None else square.get_rent()} ‚Çø\nmais vous √™tes sous protection de carte chance"
                
                elif square.rent > user.money and square.owner is None:
                    text = f"**{user.discord.name}** vous n'avez pas assez d'argent pour acheter {square.name}"
                
                elif square.get_rent() < user.money and square.owner is not None:
                    user.money -= square.get_rent()
                    square.owner.money += square.get_rent()
                    square.benefit += square.get_rent()
                    text = f"**{user.discord.name}** paye {square.get_rent()} ‚Çø a **{square.owner.discord.name}** !"

                elif square.get_rent() > user.money and square.owner is not None:
                    text = f"**{user.discord.name}** vous n'avez pas assez d'argent pour payer le loyer ! il est donc √©liminer\n**{square.owner.discord.name}** gagne que {user.money} ‚Çø"
                    user.game_over()
                    square.owner.money += user.money
                    square.benefit += user.money
                    await asyncio.sleep(3)


        # case chance
        elif callable(square):
            text = luck()
            for player_ in list_player:
                place_player(player_)
            await asyncio.sleep(2)
            await msg.edit(embed=discord_embed(hearder_msg(), f"le d√© est tomb√© sur ... {dice} !", text))
            await asyncio.sleep(2)


        # case impots
        elif len(square) == 2:
            if square[1] < user.money:
                user.money -= square[1]
                text = f"**{user.discord.name}** vous devez payer les {square[0]}, {square[1]} ‚Çø"

            elif square[1] > user.money:
                user.game_over()
                text = f"**{user.discord.name}** vous devez payer les {square[0]}, {square[1]} ‚Çø\nmais vous n'avez pas assez d'argent, vous √™tes donc √©liminer !"


        # case sp√©cial
        elif type(square) is str:
            if square == "d√©part":
                text = "vous recevez 200 ‚Çø !"
                user.money += 100
            
            elif square == "prison":
                text = "vous visitez la prison, bizarrement il y a que des noirs et des arabes"
            
            elif square == "parc gratuit":
                text = "vous visitez le parc gratuit"

            else:
                text = "le policier vous a pris pour un noir ! il vous jete en prison"
                user.jail()

        
        await msg.edit(embed=discord_embed(hearder_msg(), f"le d√© est tomb√© sur ... {dice} !", text))

        for react in ["‚ùå", "‚úÖ"]:
            await msg.clear_reaction(react)


        if replay and not user.lost:
            await asyncio.sleep(4)
            await wait_reactions()

    ### d√©claration des variables

    list_square = []
    for values in [["d√©part"], ["boulevard de belleville", 60, "üü´"], [luck], ["rue lecoubre", 60, "üü´"], ["imp√¥ts sur le revenue", 200], ["gare monparnasse", 200, "üöâ"], ["rue de vaugirard", 100, "üü¶"], [luck], ["rue de courcelles", 100, "üü¶"], ["avenue de la republique", 120, "üü¶"], ["prison"], ["boulevard de la vilette", 140, "üü™"], [luck], ["avenue de neuilly", 140, "üü™"], ["rue de paradis", 160, "üü™"], ["gare de Lyon", 200, "üöâ"], ["avenue mozart", 180, "üüß"], [luck], ["boulevard saint-michel", 180, "üüß"], ["place pigalle", 200, "üüß"], ["parc gratuit"], ["avenue matignon", 220, "üü•"], [luck], ["boulevard malesherbes", 220, "üü•"], ["avenue henri-martin", 240, "üü•"], ["gare du nord", 200, "üöâ"], ["faurbourg saint-honor√©", 260, "üü®"], ["place de la bourse", 260, "üü®"], [luck], ["rue la fayette", 280, "üü®"], ["allez en prison"], ["avenue de breteuil", 300, "üü©"], ["avenue foch", 300, "üü©"], [luck], ["boulevard des capucines", 320, "üü©"], ["gare de saint-Lazare", 200, "üöâ"], [luck], ["avenue des champs-√©lys√©es", 350, "‚¨ú"], ["taxes de luxe", 100], ["rue de la paix", 400, "‚¨ú"]]:
        if len(values) == 3:
            list_square.append(property(values[0], values[1], values[2]))
        elif len(values) == 2:
            list_square.append([values[0], values[1]])
        elif len(values) == 1 and type(values[0]) is str:
            list_square.append(values[0])
        else:
            list_square.append(values[0])


    board = _board(list_square)

    matrice_board = [
        ["‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ"], 
        ["‚¨õ", "üöó", "üü•", "‚ùî", "üü•", "üü•", "üöâ", "üü®", "üü®", "‚ùî", "üü®", "üëÆ", "‚¨õ"],
        ["‚¨õ", "üüß", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "üü©", "‚¨õ"],
        ["‚¨õ", "üüß", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "üü©", "‚¨õ"],
        ["‚¨õ", "‚ùî", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚ùî", "‚¨õ"],
        ["‚¨õ", "üüß", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "üü©", "‚¨õ"],
        ["‚¨õ", "üöâ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "üöâ", "‚¨õ"],
        ["‚¨õ", "üü™", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚ùî", "‚¨õ"],
        ["‚¨õ", "üü™", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨ú", "‚¨õ"],
        ["‚¨õ", "‚ùî", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "üíµ", "‚¨õ"],
        ["‚¨õ", "üü™", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨ú", "‚¨õ"],
        ["‚¨õ", "‚õìÔ∏è", "üü¶", "üü¶", "‚ùî", "üü¶", "üöâ", "üíµ", "üü´", "‚ùî", "üü´", "‚¨ÖÔ∏è", "‚¨õ"],
        ["‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ", "‚¨õ"]
        ]


    min = 1 if private == "normal" else -1
    max = 32

    prepa_emote = ["üí§", "ü¶ë", "ü¶•", "‚ôø", "üõí", "üëë", "‚òÉÔ∏è", "üê∑", "üê≠", "üêê", "üç©", "üéè", "‚òÑÔ∏è", "ü¶¶", "üçë", "üõ∫", "ü¶â", "ü¶Ä"]
    list_emote = []
    list_emote_game = ["üé≤", "‚ÑπÔ∏è", "‚¨ÜÔ∏è", "üè≥Ô∏è", "üè¶"]

    list_player = [player(_user, random_emote()) for _user in list_user]
    random.shuffle(list_player)

    embed=discord.Embed()
    for player_ in list_player:
        embed.add_field(name=player_.discord.name, value=player_.emote, inline=True)
    await ctx.send(embed=embed)

    msg = await ctx.send(embed=discord_embed("...", "...", "..."))
    await put_emotes(list_emote_game)
    
    index_player = 0

    while True:
        user = list_player[index_player]

        if len(list_player) == 1:
            await msg.edit(embed=discord_embed("...", "...", f"Partie termin√©e le gagnant est {user.discord.mention}"))
            return
        
        if await wait_reactions():
            return

        if user.turn_protection != 0:
            user.turn_protection -= 1

        await asyncio.sleep(4)
        index_player = 0 if index_player >= len(list_player) - 1 else index_player + 1



@client.command(aliases=["p4"])
async def puissance4(ctx, member):

    response, member = await start_game_duo(ctx, member, "puissance 4")
    if response is False:
        return
    
    rond_gris = "‚ö´"
    rond_rouge = "üî¥"
    rond_jaune = "üü°"

    if bool(random.getrandbits(1)):
        dico_p4 = {"rouge": (ctx.author, rond_rouge, 0xdd2e44), "jaune": (member, rond_jaune, 0xfdcB58)}
    else:
        dico_p4 = {"jaune": (ctx.author, rond_jaune, 0xfdcB58), "rouge": (member, rond_rouge, 0xdd2e44)}

    plateau = [[rond_gris for _ in range(7)] for _ in range(6)]

    def str_plateau(matrice):
        msg = ""
        for i in matrice:
            for j in i:
                msg += j
            msg += "\n"
        return msg

    couleur = "jaune"

    async def send():
        embed=discord.Embed(color=0x000000, title="Puissance 4")
        embed.add_field(name="Preparation", value="...", inline=False)
        embed.add_field(name="Plateau", value=f"1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£\n{str_plateau(plateau)}", inline=False)
        msg = await ctx.send(embed=embed)
        for e in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "üîÑ", "‚¨áÔ∏è"]:
            await msg.add_reaction(e)
        return msg

    msg = await send()

    async def edit_embed(title = None, message = None):
        embed=discord.Embed(color=dico_p4[couleur][2], title="Puissance 4")
        embed.add_field(name="Tour de", value=dico_p4[couleur][0].mention, inline=False if title is None else True)
        if title is not None:
            embed.add_field(name=title, value=message, inline=True)
        embed.add_field(name="Plateau", value=f"1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£\n{str_plateau(plateau)}", inline=False)
        await msg.edit(embed=embed)

    async def end():
        try:
            num, user = await client.wait_for("reaction_add", check=lambda reaction, user: str(reaction.emoji) == "üîÑ" and user.id in [dico_p4["rouge"][0].id, dico_p4["jaune"][0].id], timeout=30)
        except asyncio.TimeoutError:
            return None
        plateau = [[rond_gris for _ in range(7)] for _ in range(6)]
        await msg.remove_reaction(num.emoji, user)
        return plateau

    while True:
        while plateau[0].count(rond_gris) != 0:
            await edit_embed()
            
            try:
                num, _ = await client.wait_for("reaction_add", check=lambda reaction, user: str(reaction.emoji) in ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "üîÑ", "‚¨áÔ∏è"] and user.id == dico_p4[couleur][0].id, timeout=180)
            except asyncio.TimeoutError:
                return
            await msg.remove_reaction(num.emoji, dico_p4[couleur][0])
            if str(num.emoji) == "‚¨áÔ∏è":
                await msg.delete()
                msg = await send()
            elif str(num.emoji) == "üîÑ":
                plateau = [[rond_gris for _ in range(7)] for _ in range(6)]
            else:
                dict_number = {
                    "1Ô∏è‚É£": 0,
                    "2Ô∏è‚É£": 1,
                    "3Ô∏è‚É£": 2,
                    "4Ô∏è‚É£": 3,
                    "5Ô∏è‚É£": 4,
                    "6Ô∏è‚É£": 5,
                    "7Ô∏è‚É£": 6
                }

                def place():
                    for i in range(len(plateau)):
                        if plateau[len(plateau) - i - 1][dict_number[num.emoji]] == rond_gris:
                            plateau[len(plateau) - i - 1][dict_number[num.emoji]] = dico_p4[couleur][1]
                            return len(plateau) - i - 1, dict_number[num.emoji]
                    return -1, -1

                positionx, positiony = place()

                if (positionx, positiony) == (-1, -1):
                    await ctx.send(f"{dico_p4[couleur][0].mention} la colonne {dict_number[num.emoji] + 1} est pleine !")
                else:

                    listex = plateau[positionx]
                    listey = [plateau[i][positiony] for i in range(6)]

                    listeDiago1 = [plateau[positionx - i][positiony - i] for i in range(0, 7) if positionx - i >= 0 and positiony - i >= 0]
                    listeDiago1.reverse()
                    listeDiago1 += [plateau[positionx + i][positiony + i] for i in range(1, 7) if positiony + i < 7 and positionx + i < 6]
                    listeDiago1.reverse()

                    listeDiago2 = [plateau[positionx - i][positiony + i] for i in range(0, 7) if positionx - i >= 0 and positiony + i <= 6]
                    listeDiago2.reverse()
                    listeDiago2 += [plateau[positionx + i][positiony - i] for i in range(1, 7) if positionx + i < 6 and positiony - i >= 0]
                    listeDiago2.reverse()

                    for liste in [listex, listey, listeDiago1, listeDiago2]:
                        tmp = "".join(liste)
                        if tmp.count(dico_p4[couleur][1]) != tmp.replace(dico_p4[couleur][1] * 4, "").count(dico_p4[couleur][1]):
                            await edit_embed("Vainqueur", dico_p4[couleur][0].mention)
                            plateau = await end()

                    if couleur == "jaune":
                        couleur = "rouge"
                    else:
                        couleur = "jaune"

        await edit_embed("Egalit√©", "Û†ÄÆ ")
        plateau = await end()
        if plateau is None:
            return
"""
@puissance4.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque le membre a affronter ! syntaxe: {prefix}puissance4 <membre>")
"""

# - admin
@client.command()
@has_permissions(administrator=True)
async def reaction(ctx, channel, id, *, react):
    if not channel.isdigit():
        channel = replaces(channel, "<#", "", ">", "")

    channel = client.get_channel(int(channel))
    if channel is None:
        await ctx.send("channel non trouv√©")
    else:
        msg = await channel.fetch_message(int(id))
        react = react.replace(" ", "")
        liste = []
        previous = 0
        for i in range(len(react) - 2):
            if react[i] + react[i + 1] == "><":
                liste.append(react[previous:i + 1])
                previous = i + 1

        liste.append(react[previous:])
        for e in liste:
            await msg.add_reaction(e)
        await ctx.message.add_reaction("‚úÖ")

@reaction.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.CommandInvokeError):
        await ctx.send("L'id correspond √† auncun message ou le bot ne peux pas mettre la reaction saisie")
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque des arguments ! syntaxe: {prefix}reaction <salon> <id du msg> <reactions>")

        


@client.command()
@has_permissions(administrator=True)
async def toggle_welcome_message(ctx, msg = None):
    if dico[ctx.guild.id]["welcome_msg"] is None:
        if msg is None:
            await ctx.send(f"**quel message de bienvenue voulez-vous mettre ?**\npour que le bot √©crive le nom du nouvel arrivant dans message √©criver $username$\nexemple: le message \"bienvenue $username$\" donnera \"bienvenue {ctx.author.name}\"")
            response = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout=180)
            msg = response.content
        dico[ctx.guild.id]["welcome_msg"] = msg
        dico_update()
        await ctx.send("le nouveau message de bienvenue est enregistr√©")
    else:
        await ctx.send(f"Le message actuel est \n\n\"{dico[ctx.guild.id]['welcome_msg']}\" \n\nVoulez-vous d√©sactiv√© le message de bienvenue ?")
        response = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id and message.content.lower() in ["o", "oui", "yes", "y", "no", "n", "non"], timeout=180)
        if response.content.lower() in ["o", "oui", "yes", "y"]:
            dico[ctx.guild.id]["welcome_msg"] = None
            dico_update()
            await ctx.send("La fonction message de bienvenue est d√©sactiv√©e")
        else:
            await response.add_reaction("‚úÖ")
            


@client.command()
@has_permissions(administrator=True)
async def say(ctx, channel, *, message):
    if not channel.isdigit():
        channel = replaces(channel, "<#", "", ">", "")

    channel = client.get_channel(int(channel))
    if channel is None:
        await ctx.send("channel non trouv√©")
    else:
        await channel.send(message)
        await ctx.message.add_reaction("‚úÖ")

@say.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque le salon ! syntaxe: {prefix}say <salon> <message>")


@client.command()
@has_permissions(administrator=True)
async def toggle_autorole(ctx, role : discord.Role = None):
    if dico[ctx.guild.id]["autorole"] is None:
        if role is None:
            await ctx.send("quel role voulez vous mettre ?")
            response = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout=30)
            if "<@&" not in response.content.lower():
                await ctx.send(f"\"{response.content}\" n'est pas un r√¥le")
                return
            id = replaces(response.content, "<@&", "", ">", "")
            role = discord.utils.get(ctx.author.guild.roles, id=int(id))
        dico[ctx.guild.id]["autorole"] = role.id
        dico_update()
        await ctx.send(f"Le role {role.mention} est maintenant donn√© √† tous les nouveaux arrivant !")
    else:
        dico[ctx.guild.id]["autorole"] = None
        dico_update()
        await ctx.send("La fonction d'autorole est maintenant d√©sactiv√©")


@client.command(aliases=["c"])
@has_permissions(administrator=True)
async def clear(ctx, *, arg = "1"):
    if arg.isdigit():
        await ctx.channel.purge(limit = int(arg) + 1)
    else:
        tmp = 0
        async for message in ctx.history(limit = 500):
            tmp += 1
            if message.jump_url == arg:
                await ctx.send(f"{tmp - 2} messages s√©lectionn√© jusqu'au message demand√©. voulez-vous les supprimer ? (oui/non)")
                msg = await client.wait_for("message", check = lambda message: message.author == ctx.author)
                if msg.content.lower() in ["oui", "o", "y", "yes"]:
                    await ctx.channel.purge(limit = tmp + 1)
                else:
                    await msg.add_reaction("‚úÖ")
                return


@client.command()
@has_permissions(administrator=True)
async def nuck(ctx, channel):
    if not channel.isdigit():
        channel = replaces(channel, "<#", "", ">", "")

    channel = client.get_channel(int(channel))
    if channel is None:
        await ctx.send("salon non trouv√©")
        return
    
    await ctx.send(f"Voulez-vous vraiment nuck le salon {channel.mention} ?")
    try:
        reponse = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout = 30)
    except asyncio.TimeoutError:
        await ctx.send("d√©lai d√©pass√©")
        return
    if reponse.content.lower() in ["yes", "y", "o", "oui"]:
        await ctx.guild.create_text_channel(channel.name, overwrites = channel.overwrites, category = channel.category, position = channel.position, topic = channel.topic, nsfw = channel.nsfw, slowmode_delay = channel.slowmode_delay)
        await channel.delete()
        await ctx.send("Channel nuck !")

@nuck.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque le salon ! syntaxe: {prefix}nuck <salon>")

@client.command()
@has_permissions(administrator=True)
async def toggle_rolevocal(ctx, role: discord.Role):
    if dico[ctx.author.guild.id]["voc"] is None:
        if role is None:
            await ctx.send("quel role voulez vous mettre ?")
            response = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout=30)
            if "<@&" not in response.content.lower():
                await ctx.send(f"\"{response.content}\" n'est pas un r√¥le")
                return
            id = replaces(response.content, "<@&", "", ">", "")
            role = discord.utils.get(ctx.author.guild.roles, id=int(id))
        dico[ctx.guild.id]["autorole"] = role.id
        dico_update()
        await ctx.send(f"Le role {role.mention} est maintenant donn√© √† toutes les personnes qui rentre dans un salon vocal !")
    else:
        dico[ctx.author.guild.id]["voc"] = None
        dico_update()
        await ctx.send("Plus aucun role ne sera donner quand quelqu'un rejoint un salon vocal")


@client.command()
@has_permissions(administrator=True)
async def toggle_logs(ctx):
    if dico[ctx.author.guild.id]["logs"] is None:
        await ctx.send("Dans quel salon voulez-vous activ√©s les logs ?")
        response = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout=30)
        if "<#" not in response.content.lower():
            await ctx.send(f"\"{response.content}\" n'est pas un salon")
            return
        id = replaces(response.content, "<#", "", ">", "")
        channel = client.get_channel(int(id))
        dico[ctx.guild.id]["logs"] = channel.id
        dico_update()
        await ctx.send(f"Les logs sont maintenant activ√©s dans {channel.mention} !")
    else:
        dico[ctx.guild.id]["logs"] = None
        dico_update()
        await ctx.send("Les logs sont maintenant d√©sactiv√© !")


@client.command()
async def view(ctx):
    reponse = await client.wait_for("message", check=lambda message: message.author.id == ctx.author.id and ctx.channel.id == message.channel.id, timeout = 30)
    print(reponse.content)


# - moi
@client.command(aliases=["set_avatar"])
async def set_pp(ctx):
    if ctx.author.id != 236853417681616906:
        return
    if len(ctx.message.attachments) == 0:
        await ctx.send("Il faut envoy√© une image")
    elif len(ctx.message.attachments) > 1:
        await ctx.send("Il faut qu'une image")
    else:
        file = ctx.message.attachments[0].filename
        await ctx.message.attachments[0].save(file)
        byte_avatar = open(file, "rb").read()
        await client.user.edit(avatar=byte_avatar)
        await ctx.message.add_reaction("‚úÖ")
        os.remove(file)


@client.command()
async def shutdown(ctx):
    if ctx.author.id != 236853417681616906:
        return
    await ctx.message.add_reaction("‚úÖ")
    await client.close()
    quit()

@client.command()
async def dm(ctx, member, *, msg):
    if ctx.author.id != 236853417681616906:
        return
    member = get_member(member)

    if member is None:
        await ctx.send("Vous n'avez pas mentionn√© un joueur !")

    await member.send(msg)
    await ctx.message.add_reaction("‚úÖ")

@dm.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.CommandInvokeError):
        await ctx.send("Le membre n'existe pas ou est introuvable")
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque des arguments ! syntaxe: {prefix}dm <membre> <msg>")

@client.command()
async def get_dm(ctx, member):
    if ctx.author.id != 236853417681616906:
        return
    member = get_member(member)

    if member is None:
        await ctx.send("Vous n'avez pas mentionn√© un joueur !")

    str = ""
    async for message in member.history(limit=None):
        str = message.author.name + ": " + message.content + "\n-----------\n\n"
        await ctx.send(str)

@get_dm.error
async def on_message_error(ctx, error):
    if isinstance(error, commands.CommandInvokeError):
        await ctx.send("Le membre n'existe pas ou est introuvable")
    if isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"Il manque des arguments ! syntaxe: {prefix}dm <membre> <msg>")
        
# --- logs       
# - message
@client.event
async def on_message_delete(message):
    if message.author.bot:
        return
    if dico[message.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{message.author.name} √† supprim√© un message", icon_url=message.author.avatar_url)
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/836943322580516904/914539782040850472/unknown.png")
        if message.content == "":
            embed.add_field(name="contenu", value="<image>", inline=True)
        else:
            embed.add_field(name="contenu", value=message.content, inline=True)
        embed.add_field(name=f"Û†ÄÆsalon", value=message.channel.mention, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=message.author.mention + " - " + get_time(), inline=False)
        msg = await channel_send(dico[message.guild.id]["logs"]).send(embed=embed)
        
        if len(message.attachments) != 0:
            files = []
            for attachment in message.attachments:
                await attachment.save(attachment.filename)
                files.append(attachment.filename)

            for index, file in enumerate(files):
                embed=discord.Embed(color=0xf0a3ff)
                embed.set_author(name=f"{message.author.name} √† supprim√© un message", icon_url=message.author.avatar_url)
                embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/836943322580516904/914539782040850472/unknown.png")
                    
                if file.endswith(".mp4"):
                    embed.video.url = f"attachment://{file}"
                    embed.video.height = message.attachments[index]
                    embed.video.width = message.attachments[index]
                else:
                    embed.set_image(url=f"attachment://{file}")
                    
                embed.add_field(name=f"Û†ÄÆsalon", value=message.channel.mention, inline=True)
                embed.add_field(name="Û†ÄÆ ", value=message.author.mention + " - " + get_time(), inline=False)
                ds_file = discord.File(file)
                await msg.reply(file=ds_file, embed=embed)
                os.remove(file)

@client.event
async def on_message_edit(before, after):
    if before.author.bot or before.guild is None or before.content == after.content:
        return
    if dico[before.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{before.author.name} √† modifi√© un message", icon_url=before.author.avatar_url)
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914861144206893076/edit.png")
        embed.add_field(name="avant", value=before.content, inline=True)
        embed.add_field(name="Û†ÄÆsalon", value=before.channel.mention, inline=True)
        embed.add_field(name="apr√®s", value=after.content, inline=False)
        embed.add_field(name="Û†ÄÆ ", value=f"{after.author.mention + ' - '  + get_time()} - [link]({before.jump_url})", inline=False)
        await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)


# - channel
@client.event
async def on_guild_channel_create(channel):
    if dico[channel.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"channel cr√©√©", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914918043170259074/plus_1.png")
        embed.add_field(name=f"Û†ÄÆsalon", value=channel.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=channel.mention + " - " + get_time(), inline=False)
        await channel_send(dico[channel.guild.id]["logs"]).send(embed=embed)


@client.event
async def on_guild_channel_delete(channel):
    if dico[channel.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"channel supprim√©", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/836943322580516904/914539782040850472/unknown.png")
        embed.add_field(name=f"Û†ÄÆsalon", value=channel.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=get_time(), inline=False)
        await channel_send(dico[channel.guild.id]["logs"]).send(embed=embed)


@client.event
async def on_guild_channel_update(before , after):
    if before.position != after.position:
        return
    if dico[before.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{after.name} √† chang√© de nom", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914861144206893076/edit.png")
        embed.add_field(name="avant", value=before.name, inline=True)
        embed.add_field(name=f"Û†ÄÆapres", value=after.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=after.mention + " - " + get_time(), inline=False)
        await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)


# - role
@client.event
async def on_guild_role_create(role):
    if dico[role.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"un nouveau role √† √©t√© cr√©√©", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914918043170259074/plus_1.png")
        embed.add_field(name="nom", value=role.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=role.mention + " - " + get_time(), inline=False)
        await channel_send(dico[role.guild.id]["logs"]).send(embed=embed)


@client.event
async def on_guild_role_update(before, after):
    if before.name == after.name:
        return
    if dico[before.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"le role {after.name} √† √©t√© modifi√©", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914861144206893076/edit.png")
        embed.add_field(name="avant", value=before.name, inline=True)
        embed.add_field(name="apr√®s", value=after.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=after.mention + " - " + get_time(), inline=False)
        await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)


@client.event
async def on_guild_role_delete(role):
    if dico[role.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"le role {role} √† √©t√© supprimer", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914539782040850472/unknown.png")
        embed.add_field(name="nom", value=role.name, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=get_time(), inline=False)
        await channel_send(dico[role.guild.id]["logs"]).send(embed=embed)


#¬†- gestion/ban/kick/gens/member
@client.event
async def on_guild_join(guild):
    if guild.id not in dico:
           dico[guild.id] =  {"name": guild.name, "logs": None, "voc": None, "autorole": None}
    dico_update()


@client.event
async def on_member_ban(guild, member):
    if dico[guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{member.name} √† √©t√© banni", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914883218275205160/notifications.png")
        embed.add_field(name="membre", value=member.mention, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=get_time(), inline=False)
        await channel_send(dico[guild.id]["logs"]).send(embed=embed)


@client.event
async def on_member_unban(guild, member):
    if dico[guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{member.name} √† √©t√© d√©banni", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914883218275205160/notifications.png")
        embed.add_field(name="membre", value=member.mention, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=get_time(), inline=False)
        await channel_send(dico[guild.id]["logs"]).send(embed=embed)


@client.event
async def on_member_join(member):
    if dico[member.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{member.name} √† rejoint le serveur", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914883218275205160/notifications.png")
        embed.add_field(name="membre", value=member.mention, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=member.mention + " - " + get_time(), inline=False)
        await channel_send(dico[member.guild.id]["logs"]).send(embed=embed)
    if dico[member.guild.id]["autorole"] is not None and not member.bot:
        role = discord.utils.get(member.guild.roles, id = dico[member.guild.id]["autorole"])
        await member.add_roles(role)
    if dico[member.guild.id]["welcome_msg"] is not None:
        await member.send(dico[member.guild.id]["welcome_msg"].replace("$username$", member.name))

        
@client.event
async def on_member_remove(member):
    if dico[member.guild.id]["logs"] is not None:
        embed=discord.Embed(color=0xf0a3ff)
        embed.set_author(name=f"{member.name} √† quitt√© le serveur", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914883218275205160/notifications.png")
        embed.add_field(name="membre", value=member.mention, inline=True)
        embed.add_field(name="Û†ÄÆ ", value=get_time(), inline=False)
        await channel_send(dico[member.guild.id]["logs"]).send(embed=embed)


@client.event
async def on_member_update(before, after):
    if dico[before.guild.id]["logs"] is not None:
        if before.display_name != after.display_name:
            embed=discord.Embed(color=0xf0a3ff)
            embed.set_author(name=f"{before.name} √† chang√© de surnom", icon_url="https://media.discordapp.net/attachments/836943322580516904/914539780363145336/unknown.png")
            embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914861144206893076/edit.png")
            embed.add_field(name="avant", value=before.display_name, inline=True)
            embed.add_field(name="apr√®s", value=after.display_name, inline=True)
            embed.add_field(name="Û†ÄÆ ", value=after.mention + " - " + get_time(), inline=False)
            await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)
        if before.roles != after.roles:
            def diff(a, b):
                return [index for index, i in enumerate(a) if i not in b]

            if len(before.roles) < len(after.roles):
                i = diff(after.roles, before.roles)
                for e in i:
                    if after.roles[e].id != dico[before.guild.id]["voc"]:
                        embed=discord.Embed(color=0xf0a3ff)
                        embed.set_author(name=f"{before.name} √† gagner un role", icon_url=before.avatar_url)
                        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914918043170259074/plus_1.png")
                        embed.add_field(name="role", value=after.roles[e].mention, inline=True)
                        embed.add_field(name="Û†ÄÆ ", value=after.mention + " - " + get_time(), inline=False)
                        await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)
            else:
                i = diff(before.roles, after.roles)
                for e in i:
                    if before.roles[e].id != dico[before.guild.id]["voc"]:
                        embed=discord.Embed(color=0xf0a3ff)
                        embed.set_author(name=f"{before.name} √† perdu un role", icon_url=before.avatar_url)
                        embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914918042981498910/minus.png")
                        embed.add_field(name="role", value=before.roles[e].mention, inline=True)
                        embed.add_field(name="Û†ÄÆ ", value=after.mention + " - " + get_time(), inline=False)
                        await channel_send(dico[before.guild.id]["logs"]).send(embed=embed)


# - vocal
@client.event
async def on_voice_state_update(member, before, after):
    if dico[member.guild.id]["logs"] is not None:
        if before.channel != after.channel:
            if before.channel is None:
                embed=discord.Embed(color=0xf0a3ff)
                embed.set_author(name=f"{member.name} √† rejoint un salon vocal", icon_url=member.avatar_url)
                embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914539760150806528/unknown.png")
                embed.add_field(name=f"Û†ÄÆsalon", value=after.channel.mention, inline=True)
                embed.add_field(name="Û†ÄÆ ", value=member.mention + " - " + get_time(), inline=False)
                await channel_send(dico[member.guild.id]["logs"]).send(embed=embed)
                if dico[member.guild.id]["voc"] is not None:
                    await member.add_roles(discord.utils.get(member.guild.roles, id = dico[member.guild.id]["voc"]))
            elif after.channel is None:
                embed=discord.Embed(color=0xf0a3ff)
                embed.set_author(name=f"{member.name} √† quitt√© un salon vocal", icon_url=member.avatar_url)
                embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914539761794961458/unknown.png")
                embed.add_field(name=f"Û†ÄÆsalon", value=before.channel.mention, inline=True)
                embed.add_field(name="Û†ÄÆ ", value=member.mention + " - " + get_time(), inline=False)
                await channel_send(dico[member.guild.id]["logs"]).send(embed=embed)
                if dico[member.guild.id]["voc"] is not None:
                    await member.remove_roles(discord.utils.get(member.guild.roles, id = dico[member.guild.id]["voc"]))
            else:
                embed=discord.Embed(color=0xf0a3ff)
                embed.set_author(name=f"{member.name} √† changer de salon vocal", icon_url=member.avatar_url)
                embed.set_thumbnail(url="https://media.discordapp.net/attachments/836943322580516904/914922944000577536/shuffle.png")
                embed.add_field(name=f"Û†ÄÆavant", value=before.channel.mention, inline=True)
                embed.add_field(name=f"Û†ÄÆapr√®s", value=after.channel.mention, inline=True)
                embed.add_field(name="Û†ÄÆ ", value=member.mention + " - " + get_time(), inline=False)
                await channel_send(dico[member.guild.id]["logs"]).send(embed=embed)


keep_alive()
client.run(token)
